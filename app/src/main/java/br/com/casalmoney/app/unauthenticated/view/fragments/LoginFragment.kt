package br.com.casalmoney.app.unauthenticated.view.fragmentsimport android.os.Bundleimport androidx.fragment.app.Fragmentimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Toastimport androidx.activity.addCallbackimport androidx.lifecycle.Observerimport androidx.lifecycle.ViewModelProviderimport androidx.navigation.fragment.findNavControllerimport br.com.casalmoney.app.Auditimport br.com.casalmoney.app.Rimport br.com.casalmoney.app.databinding.FragmentLoginBindingimport br.com.casalmoney.app.unauthenticated.viewmodel.LoginViewModelimport br.com.casalmoney.app.utils.CustomProgressDialogimport dagger.hilt.android.AndroidEntryPointimport io.reactivex.disposables.Disposableimport javax.inject.Inject@AndroidEntryPointclass LoginFragment : Fragment() {    private lateinit var binding: FragmentLoginBinding    private val progressDialog = CustomProgressDialog()    @Inject lateinit var audit: Audit    private val viewModel: LoginViewModel by lazy {        ViewModelProvider(this).get(LoginViewModel::class.java)    }    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        binding = FragmentLoginBinding.inflate(inflater, container, false)        binding.viewModel = viewModel        binding.fragment = this        binding.lifecycleOwner = this        audit.auditString("${javaClass.kotlin}")        requireActivity().onBackPressedDispatcher.addCallback {            back(binding.root)        }        setupLoading()        return binding.root    }    private fun setupLoading() {        viewModel.disposable = viewModel.isLoading.subscribe { isLoading ->            if (isLoading) {                activity?.let { progressDialog.show(it) }            } else {                progressDialog.dialog.dismiss()            }        }    }    fun login(view: View) {        viewModel.login()    }    override fun onResume() {        super.onResume()        observer()    }    fun back(view : View) {        findNavController().popBackStack()    }    fun forgotPassword(view: View) {        findNavController().navigate(R.id.action_loginFragment_to_recoverPasswordFragment)    }    private fun observer() {        viewModel.responseLogin.observe(viewLifecycleOwner,            Observer {            if(it?.message.isNullOrEmpty() || it?.message.isNullOrBlank()) {                findNavController().navigate(R.id.action_loginFragment_to_mainActivity)            } else {                progressDialog.dialog.dismiss()                Toast.makeText(context, it?.localizedMessage, Toast.LENGTH_SHORT).show()            }        })    }}